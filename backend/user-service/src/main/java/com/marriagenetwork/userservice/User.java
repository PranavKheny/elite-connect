package com.marriagenetwork.userservice;

import java.time.LocalDateTime; // Import JPA annotations

import jakarta.persistence.Column; // For Lombok annotations
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType; // For timestamps
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity // Marks this class as a JPA entity, meaning it maps to a database table
@Table(name = "users") // Specifies the name of the database table (optional, defaults to class name)
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode methods automatically
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields as arguments
public class User {

    @Id // Marks this field as the primary key of the table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database (e.g., auto-incrementing)
    private Long id; // Unique identifier for the user

    @Column(nullable = false, unique = true) // Maps to a database column; 'nullable = false' means it cannot be empty; 'unique = true' means no two users can have the same username
    private String username;

    @Column(nullable = false, unique = true) // Email must be present and unique
    private String email;

    @Column(nullable = false) // Password hash must be present
    private String passwordHash; // Stores the hashed password (NEVER store plain passwords!)

    @Column(columnDefinition = "TEXT") // Allows for longer text, like a bio or profile summary
    private String bio; // User's short biography

    @Column
    private String gender; // User's gender

    @Column
    private String dateOfBirth; // User's date of birth (consider using LocalDate for better type safety later)

    @Column
    private String city; // User's city

    @Column
    private String country; // User's country

    @Column
    private String profilePictureUrl; // URL to the user's profile picture (will be stored in AWS S3)

    // Timestamps for when the user was created and last updated
    @Column(nullable = false, updatable = false) // 'updatable = false' means this field is set once and not changed on subsequent updates
    private LocalDateTime createdAt;

    @Column(nullable = false)
    private LocalDateTime updatedAt;

    // Lifecycle callbacks to automatically set creation and update timestamps
    @PrePersist // Called before the entity is first saved (inserted) into the database
    protected void onCreate() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    @PreUpdate // Called before the entity is updated in the database
    protected void onUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}